// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CancelLongTermOrder extends ethereum.Event {
  get params(): CancelLongTermOrder__Params {
    return new CancelLongTermOrder__Params(this);
  }
}

export class CancelLongTermOrder__Params {
  _event: CancelLongTermOrder;

  constructor(event: CancelLongTermOrder) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get unsoldAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get purchasedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InitialLiquidityProvided extends ethereum.Event {
  get params(): InitialLiquidityProvided__Params {
    return new InitialLiquidityProvided__Params(this);
  }
}

export class InitialLiquidityProvided__Params {
  _event: InitialLiquidityProvided;

  constructor(event: InitialLiquidityProvided) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountA(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InstantSwapAToB extends ethereum.Event {
  get params(): InstantSwapAToB__Params {
    return new InstantSwapAToB__Params(this);
  }
}

export class InstantSwapAToB__Params {
  _event: InstantSwapAToB;

  constructor(event: InstantSwapAToB) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountAIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountBOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InstantSwapBToA extends ethereum.Event {
  get params(): InstantSwapBToA__Params {
    return new InstantSwapBToA__Params(this);
  }
}

export class InstantSwapBToA__Params {
  _event: InstantSwapBToA;

  constructor(event: InstantSwapBToA) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountBIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountAOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidityProvided extends ethereum.Event {
  get params(): LiquidityProvided__Params {
    return new LiquidityProvided__Params(this);
  }
}

export class LiquidityProvided__Params {
  _event: LiquidityProvided;

  constructor(event: LiquidityProvided) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountAIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountBIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountAOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountBOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LongTermSwapAToB extends ethereum.Event {
  get params(): LongTermSwapAToB__Params {
    return new LongTermSwapAToB__Params(this);
  }
}

export class LongTermSwapAToB__Params {
  _event: LongTermSwapAToB;

  constructor(event: LongTermSwapAToB) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountAIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get orderId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LongTermSwapBToA extends ethereum.Event {
  get params(): LongTermSwapBToA__Params {
    return new LongTermSwapBToA__Params(this);
  }
}

export class LongTermSwapBToA__Params {
  _event: LongTermSwapBToA;

  constructor(event: LongTermSwapBToA) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountBIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get orderId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawProceedsFromLongTermOrder extends ethereum.Event {
  get params(): WithdrawProceedsFromLongTermOrder__Params {
    return new WithdrawProceedsFromLongTermOrder__Params(this);
  }
}

export class WithdrawProceedsFromLongTermOrder__Params {
  _event: WithdrawProceedsFromLongTermOrder;

  constructor(event: WithdrawProceedsFromLongTermOrder) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get proceeds(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Pair__cancelLongTermSwapResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getUnsoldAmount(): BigInt {
    return this.value0;
  }

  getPurchasedAmount(): BigInt {
    return this.value1;
  }
}

export class Pair__getOrderDetailsResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get submitBlock(): BigInt {
    return this[1].toBigInt();
  }

  get expirationBlock(): BigInt {
    return this[2].toBigInt();
  }

  get saleRate(): BigInt {
    return this[3].toBigInt();
  }

  get sellAmount(): BigInt {
    return this[4].toBigInt();
  }

  get buyAmount(): BigInt {
    return this[5].toBigInt();
  }

  get owner(): Address {
    return this[6].toAddress();
  }

  get sellTokenId(): Address {
    return this[7].toAddress();
  }

  get buyTokenId(): Address {
    return this[8].toAddress();
  }
}

export class Pair__getOrderRewardFactorResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOrderRewardFactorAtSubmission(): BigInt {
    return this.value0;
  }

  getOrderRewardFactorAtExpiring(): BigInt {
    return this.value1;
  }
}

export class Pair__getTWAMMSalesRateEndingResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOrderPoolASalesRateEnding(): BigInt {
    return this.value0;
  }

  getOrderPoolBSalesRateEnding(): BigInt {
    return this.value1;
  }
}

export class Pair__getTWAMMStateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getLastVirtualOrderBlock(): BigInt {
    return this.value0;
  }

  getTokenASalesRate(): BigInt {
    return this.value1;
  }

  getTokenBSalesRate(): BigInt {
    return this.value2;
  }

  getOrderPoolARewardFactor(): BigInt {
    return this.value3;
  }

  getOrderPoolBRewardFactor(): BigInt {
    return this.value4;
  }
}

export class Pair__provideLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountAIn(): BigInt {
    return this.value0;
  }

  getAmountBIn(): BigInt {
    return this.value1;
  }
}

export class Pair__removeLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountAOut(): BigInt {
    return this.value0;
  }

  getAmountBOut(): BigInt {
    return this.value1;
  }
}

export class Pair extends ethereum.SmartContract {
  static bind(address: Address): Pair {
    return new Pair("Pair", address);
  }

  LP_FEE(): BigInt {
    let result = super.call("LP_FEE", "LP_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_LP_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("LP_FEE", "LP_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelLongTermSwap(
    sender: Address,
    orderId: BigInt
  ): Pair__cancelLongTermSwapResult {
    let result = super.call(
      "cancelLongTermSwap",
      "cancelLongTermSwap(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(orderId)
      ]
    );

    return new Pair__cancelLongTermSwapResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_cancelLongTermSwap(
    sender: Address,
    orderId: BigInt
  ): ethereum.CallResult<Pair__cancelLongTermSwapResult> {
    let result = super.tryCall(
      "cancelLongTermSwap",
      "cancelLongTermSwap(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(orderId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pair__cancelLongTermSwapResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getExpiriesSinceLastExecuted(): Array<BigInt> {
    let result = super.call(
      "getExpiriesSinceLastExecuted",
      "getExpiriesSinceLastExecuted():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getExpiriesSinceLastExecuted(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getExpiriesSinceLastExecuted",
      "getExpiriesSinceLastExecuted():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getOrderDetails(orderId: BigInt): Pair__getOrderDetailsResultValue0Struct {
    let result = super.call(
      "getOrderDetails",
      "getOrderDetails(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,address,address,address))",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );

    return changetype<Pair__getOrderDetailsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getOrderDetails(
    orderId: BigInt
  ): ethereum.CallResult<Pair__getOrderDetailsResultValue0Struct> {
    let result = super.tryCall(
      "getOrderDetails",
      "getOrderDetails(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,address,address,address))",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Pair__getOrderDetailsResultValue0Struct>(value[0].toTuple())
    );
  }

  getOrderRewardFactor(orderId: BigInt): Pair__getOrderRewardFactorResult {
    let result = super.call(
      "getOrderRewardFactor",
      "getOrderRewardFactor(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );

    return new Pair__getOrderRewardFactorResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getOrderRewardFactor(
    orderId: BigInt
  ): ethereum.CallResult<Pair__getOrderRewardFactorResult> {
    let result = super.tryCall(
      "getOrderRewardFactor",
      "getOrderRewardFactor(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pair__getOrderRewardFactorResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getPairOrdersAmount(): BigInt {
    let result = super.call(
      "getPairOrdersAmount",
      "getPairOrdersAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPairOrdersAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPairOrdersAmount",
      "getPairOrdersAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTWAMMSalesRateEnding(
    blockNumber: BigInt
  ): Pair__getTWAMMSalesRateEndingResult {
    let result = super.call(
      "getTWAMMSalesRateEnding",
      "getTWAMMSalesRateEnding(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return new Pair__getTWAMMSalesRateEndingResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getTWAMMSalesRateEnding(
    blockNumber: BigInt
  ): ethereum.CallResult<Pair__getTWAMMSalesRateEndingResult> {
    let result = super.tryCall(
      "getTWAMMSalesRateEnding",
      "getTWAMMSalesRateEnding(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pair__getTWAMMSalesRateEndingResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTWAMMState(): Pair__getTWAMMStateResult {
    let result = super.call(
      "getTWAMMState",
      "getTWAMMState():(uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new Pair__getTWAMMStateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getTWAMMState(): ethereum.CallResult<Pair__getTWAMMStateResult> {
    let result = super.tryCall(
      "getTWAMMState",
      "getTWAMMState():(uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pair__getTWAMMStateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getTotalSupply(): BigInt {
    let result = super.call("getTotalSupply", "getTotalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSupply",
      "getTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  instantSwapFromAToB(sender: Address, amountAIn: BigInt): BigInt {
    let result = super.call(
      "instantSwapFromAToB",
      "instantSwapFromAToB(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(amountAIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_instantSwapFromAToB(
    sender: Address,
    amountAIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "instantSwapFromAToB",
      "instantSwapFromAToB(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(amountAIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  instantSwapFromBToA(sender: Address, amountBIn: BigInt): BigInt {
    let result = super.call(
      "instantSwapFromBToA",
      "instantSwapFromBToA(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(amountBIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_instantSwapFromBToA(
    sender: Address,
    amountBIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "instantSwapFromBToA",
      "instantSwapFromBToA(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(amountBIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  longTermSwapFromAToB(
    sender: Address,
    amountAIn: BigInt,
    numberOfBlockIntervals: BigInt
  ): BigInt {
    let result = super.call(
      "longTermSwapFromAToB",
      "longTermSwapFromAToB(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(amountAIn),
        ethereum.Value.fromUnsignedBigInt(numberOfBlockIntervals)
      ]
    );

    return result[0].toBigInt();
  }

  try_longTermSwapFromAToB(
    sender: Address,
    amountAIn: BigInt,
    numberOfBlockIntervals: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "longTermSwapFromAToB",
      "longTermSwapFromAToB(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(amountAIn),
        ethereum.Value.fromUnsignedBigInt(numberOfBlockIntervals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  longTermSwapFromBToA(
    sender: Address,
    amountBIn: BigInt,
    numberOfBlockIntervals: BigInt
  ): BigInt {
    let result = super.call(
      "longTermSwapFromBToA",
      "longTermSwapFromBToA(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(amountBIn),
        ethereum.Value.fromUnsignedBigInt(numberOfBlockIntervals)
      ]
    );

    return result[0].toBigInt();
  }

  try_longTermSwapFromBToA(
    sender: Address,
    amountBIn: BigInt,
    numberOfBlockIntervals: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "longTermSwapFromBToA",
      "longTermSwapFromBToA(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(amountBIn),
        ethereum.Value.fromUnsignedBigInt(numberOfBlockIntervals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  orderBlockInterval(): BigInt {
    let result = super.call(
      "orderBlockInterval",
      "orderBlockInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_orderBlockInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "orderBlockInterval",
      "orderBlockInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderIdStatusCheck(orderId: BigInt): boolean {
    let result = super.call(
      "orderIdStatusCheck",
      "orderIdStatusCheck(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );

    return result[0].toBoolean();
  }

  try_orderIdStatusCheck(orderId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "orderIdStatusCheck",
      "orderIdStatusCheck(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  provideInitialLiquidity(
    to: Address,
    amountA: BigInt,
    amountB: BigInt
  ): BigInt {
    let result = super.call(
      "provideInitialLiquidity",
      "provideInitialLiquidity(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amountA),
        ethereum.Value.fromUnsignedBigInt(amountB)
      ]
    );

    return result[0].toBigInt();
  }

  try_provideInitialLiquidity(
    to: Address,
    amountA: BigInt,
    amountB: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "provideInitialLiquidity",
      "provideInitialLiquidity(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amountA),
        ethereum.Value.fromUnsignedBigInt(amountB)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  provideLiquidity(
    to: Address,
    lpTokenAmount: BigInt
  ): Pair__provideLiquidityResult {
    let result = super.call(
      "provideLiquidity",
      "provideLiquidity(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(lpTokenAmount)
      ]
    );

    return new Pair__provideLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_provideLiquidity(
    to: Address,
    lpTokenAmount: BigInt
  ): ethereum.CallResult<Pair__provideLiquidityResult> {
    let result = super.tryCall(
      "provideLiquidity",
      "provideLiquidity(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(lpTokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pair__provideLiquidityResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  removeLiquidity(
    to: Address,
    lpTokenAmount: BigInt
  ): Pair__removeLiquidityResult {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(lpTokenAmount)
      ]
    );

    return new Pair__removeLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidity(
    to: Address,
    lpTokenAmount: BigInt
  ): ethereum.CallResult<Pair__removeLiquidityResult> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(lpTokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pair__removeLiquidityResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  reserveMap(param0: Address): BigInt {
    let result = super.call("reserveMap", "reserveMap(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_reserveMap(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserveMap", "reserveMap(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rootKLast(): BigInt {
    let result = super.call("rootKLast", "rootKLast():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rootKLast(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rootKLast", "rootKLast():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenA(): Address {
    let result = super.call("tokenA", "tokenA():(address)", []);

    return result[0].toAddress();
  }

  try_tokenA(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenA", "tokenA():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenAReserves(): BigInt {
    let result = super.call("tokenAReserves", "tokenAReserves():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenAReserves(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenAReserves",
      "tokenAReserves():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenB(): Address {
    let result = super.call("tokenB", "tokenB():(address)", []);

    return result[0].toAddress();
  }

  try_tokenB(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenB", "tokenB():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenBReserves(): BigInt {
    let result = super.call("tokenBReserves", "tokenBReserves():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenBReserves(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenBReserves",
      "tokenBReserves():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userIdsCheck(userAddress: Address): Array<BigInt> {
    let result = super.call(
      "userIdsCheck",
      "userIdsCheck(address):(uint256[])",
      [ethereum.Value.fromAddress(userAddress)]
    );

    return result[0].toBigIntArray();
  }

  try_userIdsCheck(userAddress: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "userIdsCheck",
      "userIdsCheck(address):(uint256[])",
      [ethereum.Value.fromAddress(userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  withdrawProceedsFromLongTermSwap(sender: Address, orderId: BigInt): BigInt {
    let result = super.call(
      "withdrawProceedsFromLongTermSwap",
      "withdrawProceedsFromLongTermSwap(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(orderId)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawProceedsFromLongTermSwap(
    sender: Address,
    orderId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawProceedsFromLongTermSwap",
      "withdrawProceedsFromLongTermSwap(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(orderId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _twamm(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelLongTermSwapCall extends ethereum.Call {
  get inputs(): CancelLongTermSwapCall__Inputs {
    return new CancelLongTermSwapCall__Inputs(this);
  }

  get outputs(): CancelLongTermSwapCall__Outputs {
    return new CancelLongTermSwapCall__Outputs(this);
  }
}

export class CancelLongTermSwapCall__Inputs {
  _call: CancelLongTermSwapCall;

  constructor(call: CancelLongTermSwapCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelLongTermSwapCall__Outputs {
  _call: CancelLongTermSwapCall;

  constructor(call: CancelLongTermSwapCall) {
    this._call = call;
  }

  get unsoldAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get purchasedAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecuteVirtualOrdersCall extends ethereum.Call {
  get inputs(): ExecuteVirtualOrdersCall__Inputs {
    return new ExecuteVirtualOrdersCall__Inputs(this);
  }

  get outputs(): ExecuteVirtualOrdersCall__Outputs {
    return new ExecuteVirtualOrdersCall__Outputs(this);
  }
}

export class ExecuteVirtualOrdersCall__Inputs {
  _call: ExecuteVirtualOrdersCall;

  constructor(call: ExecuteVirtualOrdersCall) {
    this._call = call;
  }

  get blockNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteVirtualOrdersCall__Outputs {
  _call: ExecuteVirtualOrdersCall;

  constructor(call: ExecuteVirtualOrdersCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InstantSwapFromAToBCall extends ethereum.Call {
  get inputs(): InstantSwapFromAToBCall__Inputs {
    return new InstantSwapFromAToBCall__Inputs(this);
  }

  get outputs(): InstantSwapFromAToBCall__Outputs {
    return new InstantSwapFromAToBCall__Outputs(this);
  }
}

export class InstantSwapFromAToBCall__Inputs {
  _call: InstantSwapFromAToBCall;

  constructor(call: InstantSwapFromAToBCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountAIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InstantSwapFromAToBCall__Outputs {
  _call: InstantSwapFromAToBCall;

  constructor(call: InstantSwapFromAToBCall) {
    this._call = call;
  }

  get amountBOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InstantSwapFromBToACall extends ethereum.Call {
  get inputs(): InstantSwapFromBToACall__Inputs {
    return new InstantSwapFromBToACall__Inputs(this);
  }

  get outputs(): InstantSwapFromBToACall__Outputs {
    return new InstantSwapFromBToACall__Outputs(this);
  }
}

export class InstantSwapFromBToACall__Inputs {
  _call: InstantSwapFromBToACall;

  constructor(call: InstantSwapFromBToACall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountBIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InstantSwapFromBToACall__Outputs {
  _call: InstantSwapFromBToACall;

  constructor(call: InstantSwapFromBToACall) {
    this._call = call;
  }

  get amountAOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LongTermSwapFromAToBCall extends ethereum.Call {
  get inputs(): LongTermSwapFromAToBCall__Inputs {
    return new LongTermSwapFromAToBCall__Inputs(this);
  }

  get outputs(): LongTermSwapFromAToBCall__Outputs {
    return new LongTermSwapFromAToBCall__Outputs(this);
  }
}

export class LongTermSwapFromAToBCall__Inputs {
  _call: LongTermSwapFromAToBCall;

  constructor(call: LongTermSwapFromAToBCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountAIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get numberOfBlockIntervals(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LongTermSwapFromAToBCall__Outputs {
  _call: LongTermSwapFromAToBCall;

  constructor(call: LongTermSwapFromAToBCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LongTermSwapFromBToACall extends ethereum.Call {
  get inputs(): LongTermSwapFromBToACall__Inputs {
    return new LongTermSwapFromBToACall__Inputs(this);
  }

  get outputs(): LongTermSwapFromBToACall__Outputs {
    return new LongTermSwapFromBToACall__Outputs(this);
  }
}

export class LongTermSwapFromBToACall__Inputs {
  _call: LongTermSwapFromBToACall;

  constructor(call: LongTermSwapFromBToACall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountBIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get numberOfBlockIntervals(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LongTermSwapFromBToACall__Outputs {
  _call: LongTermSwapFromBToACall;

  constructor(call: LongTermSwapFromBToACall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ProvideInitialLiquidityCall extends ethereum.Call {
  get inputs(): ProvideInitialLiquidityCall__Inputs {
    return new ProvideInitialLiquidityCall__Inputs(this);
  }

  get outputs(): ProvideInitialLiquidityCall__Outputs {
    return new ProvideInitialLiquidityCall__Outputs(this);
  }
}

export class ProvideInitialLiquidityCall__Inputs {
  _call: ProvideInitialLiquidityCall;

  constructor(call: ProvideInitialLiquidityCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountA(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ProvideInitialLiquidityCall__Outputs {
  _call: ProvideInitialLiquidityCall;

  constructor(call: ProvideInitialLiquidityCall) {
    this._call = call;
  }

  get lpTokenAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ProvideLiquidityCall extends ethereum.Call {
  get inputs(): ProvideLiquidityCall__Inputs {
    return new ProvideLiquidityCall__Inputs(this);
  }

  get outputs(): ProvideLiquidityCall__Outputs {
    return new ProvideLiquidityCall__Outputs(this);
  }
}

export class ProvideLiquidityCall__Inputs {
  _call: ProvideLiquidityCall;

  constructor(call: ProvideLiquidityCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lpTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ProvideLiquidityCall__Outputs {
  _call: ProvideLiquidityCall;

  constructor(call: ProvideLiquidityCall) {
    this._call = call;
  }

  get amountAIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountBIn(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lpTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get amountAOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountBOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawProceedsFromLongTermSwapCall extends ethereum.Call {
  get inputs(): WithdrawProceedsFromLongTermSwapCall__Inputs {
    return new WithdrawProceedsFromLongTermSwapCall__Inputs(this);
  }

  get outputs(): WithdrawProceedsFromLongTermSwapCall__Outputs {
    return new WithdrawProceedsFromLongTermSwapCall__Outputs(this);
  }
}

export class WithdrawProceedsFromLongTermSwapCall__Inputs {
  _call: WithdrawProceedsFromLongTermSwapCall;

  constructor(call: WithdrawProceedsFromLongTermSwapCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawProceedsFromLongTermSwapCall__Outputs {
  _call: WithdrawProceedsFromLongTermSwapCall;

  constructor(call: WithdrawProceedsFromLongTermSwapCall) {
    this._call = call;
  }

  get proceeds(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
